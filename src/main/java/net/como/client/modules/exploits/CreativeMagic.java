package net.como.client.modules.exploits;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.function.Supplier;

import net.como.client.ComoClient;
import net.como.client.commands.structures.Command;
import net.como.client.events.Event;
import net.como.client.events.client.ClientTickEvent;
import net.como.client.items.CreativeItem;
import net.como.client.items.impl.CrashSack;
import net.como.client.items.impl.FunnySword;
import net.como.client.items.impl.LingeringTrollagePotion;
import net.como.client.items.impl.TrollagePotion;
import net.como.client.items.impl.string.BanBook;
import net.como.client.items.impl.string.OpBook;
import net.como.client.misc.Module;
import net.como.client.misc.settings.Setting;
import net.como.client.utils.ChatUtils;
import net.como.client.utils.NbtUtils;
import net.fabricmc.fabric.api.client.itemgroup.FabricItemGroupBuilder;
import net.minecraft.item.ItemGroup;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.nbt.NbtList;
import net.minecraft.util.Identifier;

public class CreativeMagic extends Module {
    private Boolean hasLoaded = false;
    public final static Identifier GROUP_ID = new Identifier("como-client:creative_magic"); 

    @Override
    public boolean shouldDisplayInModList() {
        return false;
    }

    public CreativeMagic() {
        super("CreativeMagic", true);
    
        this.setDescription("Adds a creative item group with custom NBT items.");

        this.setCategory("Exploit");

        this.addSetting(new Setting("AutoRefresh", false));
        this.addSetting(new Setting("AllowLaggy", false));
    }
    
    private Supplier<ItemStack> iconSupplier = new Supplier<ItemStack>() {
        public ItemStack get() {
            ItemStack item = new ItemStack(Items.TNT);
            
            NbtCompound nbt = new NbtCompound();
            NbtList es = new NbtList();

            es.add(NbtUtils.enchantment("minecraft:sharpness", (short)(1)));
            nbt.put("Enchantments", es);

            item.setNbt(nbt);

            return item;
        }
    };

    public void refreshItems() {
        hasLoaded = true;
        items.clear();

        this.addItem(new FunnySword());

        // Trollage Potions
        this.addItem(new TrollagePotion());
        this.addItem(new LingeringTrollagePotion());

        // Books
        this.addItem(new OpBook());
        this.addItem(new BanBook());

        // Other
        this.addItem(new CrashSack());
    }

    private FabricItemGroupBuilder builder;
    private HashMap<String, ItemStack> items = new HashMap<>();

    // Used to register new items
    public void addItem(String name, ItemStack item) {
        this.items.put(name, item);
    }

    public void addItem(CreativeItem item) {
        if (item.isLaggy() && !this.getBoolSetting("AllowLaggy")) return;

        this.addItem(item.getName(), item.readyStack());
    }

    private ItemGroup group;

    @Override
    public void activate() {
        if (this.builder != null) return;

        this.builder = FabricItemGroupBuilder.create(GROUP_ID);
        builder.icon(this.iconSupplier);

        builder.appendItems((stacks, itemGroup) -> {
            if (this.getBoolSetting("AutoRefresh")) this.refreshItems();

            for (ItemStack stack : this.items.values()) {
                stacks.add(stack);
            }
        });

        this.group = this.builder.build();

        this.addListen(ClientTickEvent.class);
    }

    @Override
    public void deactivate() {
        // TODO hide it or delete it
        this.removeListen(ClientTickEvent.class);
    }

    @Override
    public void fireEvent(Event event) {
        switch (event.getClass().getSimpleName()) {
            case "ClientTickEvent": {
                if (!this.hasLoaded) this.refreshItems();
                
                break;
            }
        }
    }

    @Override
    public Iterable<Command> getCommands() {
        List<Command> cmds = new ArrayList<>();

        cmds.add(new RefreshCommand());

        return cmds;
    }

    private static class RefreshCommand extends Command {

        public RefreshCommand() {
            super("refresh", "", "Refreshes the items in the item group.");
        }

        private CreativeMagic getCreativeMagic() {
            return (CreativeMagic)ComoClient.Modules.get("creativemagic");
        }

        @Override
        public Boolean trigger(String[] args) {
            CreativeMagic cm = this.getCreativeMagic();
            
            if (cm.getBoolSetting("AutoRefresh")) {
                cm.displayMessage(String.format("%sAutomatic refresh is enabled (nothing to do!)", ChatUtils.RED));
                return true;
            }

            cm.refreshItems();
            cm.displayMessage(String.format("Refreshed a total of %s%d%s items!", ChatUtils.GREEN, cm.items.size(), ChatUtils.WHITE));

            return true;
        }
    }
}
