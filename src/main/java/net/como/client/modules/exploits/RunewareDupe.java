package net.como.client.modules.exploits;

import net.como.client.ComoClient;
import net.como.client.events.ClientTickEvent;
import net.como.client.events.SendPacketEvent;
import net.como.client.structures.Module;
import net.como.client.structures.events.Event;
import net.como.client.structures.settings.Setting;
import net.como.client.utils.InteractionUtils;
import net.minecraft.block.EnderChestBlock;
import net.minecraft.client.gui.screen.Screen;
import net.minecraft.network.packet.c2s.play.CloseHandledScreenC2SPacket;
import net.minecraft.util.hit.HitResult;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.block.EnderChestBlock;
import net.minecraft.util.math.BlockPos;

public class RunewareDupe extends Module {
    public static enum STAGE {
        S_START,
        S_FIRST_OPEN,
        S_FIRST_TAKE,
        S_FIRST_CLOSE,

        S_SECOND_OPEN,
        S_SECOND_TAKE,
        S_SECOND_CLOSE,

        S_CLEANUP_OPEN,
        S_CLEANUP_CLOSE,

        S_FINISH
    }

    public Boolean shouldActivateButton() {
        return !performDupe;
    }

    private void takeItems() {
        currentTakeIndex = 0;
        currentTakeIndex = getNextTakeIndex();
    }

    private BlockHitResult eChestHitResult;

    public BlockPos getEnderChestPos() {
        return this.eChestHitResult.getBlockPos();
    }

    public Boolean performDupe = false;
    private STAGE currentStage = STAGE.S_START;

    public STAGE getStage() {
        return this.currentStage;
    }

    public RunewareDupe() {
        super("RunewareDupe");

        this.addSetting(new Setting("Delay", 1d));
        this.addSetting(new Setting("TakeDelay", 0.1d));
    }
    
    private void reset() {
        this.currentStage = STAGE.S_START;
        this.performDupe = false;

        this.nextActionTime = 0d;
        this.nextTakeTime = 0d;

        this.currentTakeIndex = 27;
    }

    @Override
    public void activate() {
        this.addListen(ClientTickEvent.class);
        this.addListen(SendPacketEvent.class);
    }

    @Override
    public void deactivate() {
        this.removeListen(ClientTickEvent.class);
        this.removeListen(SendPacketEvent.class);
    }

    private void openEchest() {
        ComoClient.getClient().interactionManager.interactBlock(ComoClient.me(), ComoClient.getClient().world, Hand.MAIN_HAND, this.eChestHitResult);
    }

    private boolean closeEchest() {
        Screen currentScreen = ComoClient.getClient().currentScreen;

        if (currentScreen == null) {
            this.displayMessage("Make sure you're in an ender chest.");
            this.reset();

            return false;
        }

        ComoClient.me().closeHandledScreen();
        return true;
    }

    private Double nextActionTime = 0d;
    private Double nextTakeTime = 0d;

    private int currentTakeIndex = 27;
    
    private Boolean takeNext() {
        if (currentTakeIndex >= 27) return false;

        if (ComoClient.getCurrentTime() < this.nextTakeTime) return true;

        InteractionUtils.fastPickupItem(currentTakeIndex);
        currentTakeIndex = getNextTakeIndex();
        nextTakeTime = ComoClient.getCurrentTime() + this.getDoubleSetting("TakeDelay");

        return true;
    }

    private int getNextTakeIndex() {
        if (ComoClient.me().currentScreenHandler == null) return 27;
        
        for (int i = currentTakeIndex + 1; i < 27; i++) {
            if (!ComoClient.me().currentScreenHandler.getSlot(i).getStack().isEmpty()) return i;
        }

        // Nothing left.
        return 27;
    }

    @Override
    public void fireEvent(Event event) {
        switch (event.getClass().getSimpleName()) {
            case "ClientTickEvent": {
                if (ComoClient.getCurrentTime() < this.nextActionTime || !this.performDupe) break;

                // Pick up all items
                if (this.takeNext()) break;

                switch (this.getStage()) {
                    case S_START: {
                        if (!this.closeEchest()) break;

                        // Make sure we are looking at a block
                        HitResult hitResult = ComoClient.getClient().crosshairTarget;
                        if (hitResult.getType() != HitResult.Type.BLOCK) {
                            this.displayMessage("Make sure you're looking at an ender chest.");
                            this.performDupe = false;
                            break;
                        }

                        this.eChestHitResult = (BlockHitResult)(hitResult);

                        // Get echest
                        if (!(ComoClient.getClient().world.getBlockState(this.getEnderChestPos()).getBlock() instanceof EnderChestBlock)) {
                            this.displayMessage("Make sure you're looking at an ender chest.");
                            this.performDupe = false;
                            break;
                        }

                        this.currentStage = STAGE.S_FIRST_OPEN;
                        break;
                    }

                    case S_FIRST_OPEN: {
                        openEchest();
                        
                        this.currentStage = STAGE.S_FIRST_TAKE;

                        break;
                    }
                    case S_FIRST_TAKE: {
                        this.takeItems();

                        this.currentStage = STAGE.S_FIRST_CLOSE;
                        break;
                    }
                    case S_FIRST_CLOSE: {
                        if (!this.closeEchest()) break;
                        this.currentStage = STAGE.S_SECOND_OPEN;

                        break;
                    }

                    case S_SECOND_OPEN: {
                        openEchest();
                        
                        this.currentStage = STAGE.S_SECOND_TAKE;

                        break;
                    }
                    case S_SECOND_TAKE: {
                        this.takeItems();

                        this.currentStage = STAGE.S_SECOND_CLOSE;
                        break;
                    }
                    case S_SECOND_CLOSE: {
                        if (!this.closeEchest()) break;
                        this.currentStage = STAGE.S_CLEANUP_OPEN;

                        break;
                    }

                    case S_CLEANUP_OPEN: {
                        openEchest();
                        this.currentStage = STAGE.S_CLEANUP_CLOSE;
                        break;
                    }

                    case S_CLEANUP_CLOSE: {
                        if (!this.closeEchest()) break;
                        this.currentStage = STAGE.S_FINISH;

                        break;
                    }

                    case S_FINISH: {
                        this.displayMessage("Dupe complete!");
                        this.reset();

                        break;
                    }
                }

                this.nextActionTime = ComoClient.getCurrentTime() + this.getDoubleSetting("Delay");
                
                break;
            }

            case "SendPacketEvent": {
                switch (this.getStage()) {
                    case S_CLEANUP_OPEN:
                    case S_CLEANUP_CLOSE:
                    case S_FINISH:
                        return;
                    default: {
                        if (!this.performDupe) return;
                    }
                }

                SendPacketEvent e = (SendPacketEvent)event;

                if (e.packet instanceof CloseHandledScreenC2SPacket) {
                    CloseHandledScreenC2SPacket packet = (CloseHandledScreenC2SPacket)e.packet;
                    
                    if (packet.getSyncId() > 0) e.ci.cancel();
                }

                break;
            }
        }
    }
}
