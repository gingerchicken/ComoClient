package net.como.client.modules.exploits;

import net.como.client.ComoClient;
import net.como.client.config.settings.Setting;
import net.como.client.events.Event;
import net.como.client.events.render.RenderWorldEvent;
import net.como.client.modules.Module;

public class HomeGodMode extends Module {
    public HomeGodMode() {
        super("HomeGodMode");

        this.addSetting(new Setting("HomeName", "Death"));
        this.addSetting(new Setting("CommandDelay", 250d));
        this.addSetting(new Setting("RespawnDelay", 250d));
        this.addSetting(new Setting("DeleteHome", false));

        this.setDescription("Exploits the /sethome and /home feature on servers");

        this.setCategory("Exploit");
    }

    @Override
    public void activate() {
        if (ComoClient.getInstance().getModules().get("autorespawn").isEnabled()) this.displayMessage("Please disable 'AutoRespawn' as it may mess with respawn times.");

        this.addListen(RenderWorldEvent.class);
    }

    @Override
    public void deactivate() {
        this.removeListen(RenderWorldEvent.class);
    }

    private void setHome() {
        ComoClient.me().sendChatMessage(String.format("/sethome %s", this.getStringSetting("HomeName")));
    }

    private void delHome() {
        ComoClient.me().sendChatMessage(String.format("/delhome %s", this.getStringSetting("HomeName")));
    }

    private void home() {
        ComoClient.me().sendChatMessage(String.format("/home %s", this.getStringSetting("HomeName")));
    }

    boolean deathTrigger = false;
    
    double deathTime = 0;

    private double nextRespawnTime() {
        return this.deathTime + this.getDoubleSetting("RespawnDelay")/1000d;
    }

    private boolean shouldRespawn() {
        return commands == 0 && ComoClient.getCurrentTime() >= this.nextRespawnTime();
    }

    private Double nextCommand = 0.0d;
    private Integer commands = 0;

    private void runNextCommand() {
        if (this.nextCommand > ComoClient.getCurrentTime()) return;

        switch (this.commands) {
            case 2: {
                this.delHome();
                this.commandComplete();

                break;
            }
            case 1: {
                this.setHome();
                this.commandComplete();

                break;
            }

            default: {}
        }
    }

    private void commandComplete() {
        this.nextCommand += ComoClient.getCurrentTime() + this.getDoubleSetting("CommandDelay")/1000d;

        // Make delay from now
        deathTime = ComoClient.getCurrentTime();

        this.commands--;
    }

    @Override
    public void fireEvent(Event event) {
        switch (event.getClass().getSimpleName()) {
            case "RenderWorldEvent": {
                // Check for the death
                if (ComoClient.me().isAlive()) {
                    if (deathTrigger) {
                        // Do /home
                        this.home();
                    }

                    deathTrigger = false;
                    deathTime = 0;
                    nextCommand = 0.0d;
                    commands = this.getBoolSetting("DeleteHome") ? 2 : 1;

                    break;
                }

                if (!deathTrigger) {
                    deathTrigger = true;
                    deathTime = ComoClient.getCurrentTime();

                    break;
                }

                // See if we should respawn
                if (this.shouldRespawn()) {
                    ComoClient.me().requestRespawn();
                    break;
                }

                this.runNextCommand();

                break;
            }
        }
    }
}
