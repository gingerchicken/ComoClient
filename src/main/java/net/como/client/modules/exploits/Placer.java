package net.como.client.modules.exploits;

import net.como.client.ComoClient;
import net.como.client.config.settings.Setting;
import net.como.client.events.Event;
import net.como.client.events.io.OnMouseButtonEvent;
import net.como.client.modules.Module;
import net.como.client.utils.InteractionUtils;
import net.como.client.utils.InventoryUtils;
import net.como.client.utils.RotationUtils;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.entity.projectile.ProjectileUtil;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.nbt.NbtDouble;
import net.minecraft.nbt.NbtList;
import net.minecraft.network.packet.c2s.play.CreativeInventoryActionC2SPacket;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.EntityHitResult;
import net.minecraft.util.hit.HitResult;
import net.minecraft.util.math.Vec3d;

public class Placer extends Module {

    public Placer() {
        super("Placer");

        this.setCategory("Exploit");

        this.setDescription("Allows further reach when using spawn eggs by updating the item's NBT data");

        this.addSetting(new Setting("Range", 500d) {{
                this.setMin(5d);
                this.setMax(1024d);
                this.setDescription("The range of which an item can be placed");
            }}
        );

        this.addSetting(new Setting("HeightOffset", 1d) {{
                this.setMin(-5d);
                this.setMax(5d);
                this.setDescription("The height offset of the item");
            }}
        );
    }

    private Vec3d getSpawnPos() {
        // Get the rotation vector
        Vec3d rot = RotationUtils.getClientLookVec();

        // Save the localplayer
        PlayerEntity me = ComoClient.me();

        // Get the range
        double range = this.getDoubleSetting("Range");

        // Scale the rotation vector
        Vec3d scaledRot = rot.multiply(range);

        EntityHitResult raycast = ProjectileUtil.raycast(
            me,
            me.getCameraPosVec(0),
            me.getCameraPosVec(0).add(scaledRot),
            me.getBoundingBox().stretch(scaledRot).expand(1, 1, 1),
            Entity::isAttackable,
            500 * 500
        );

        // Check the raycast
        if (raycast != null && raycast.getEntity() != null) {
            return raycast.getPos();
        }

        // Fire another ray
        HitResult hr = me.raycast(range, 0, false);
        
        // TODO verify the hit result

        // Return its position
        return hr.getPos();
    }

    public void placeSpawnEgg(ItemStack stack) {
        // Get the spawn position
        Vec3d spawnPos = this.getSpawnPos();

        // Add the height offset
        double heightOffset = this.getDoubleSetting("HeightOffset");
        spawnPos = spawnPos.add(0, heightOffset, 0);

        // Get the item's nbt
        NbtCompound nbt = stack.getOrCreateSubNbt("EntityTag");

        // Create an NBT list for the coordinates
        NbtList pos = new NbtList();
        
        // Populate the components
        pos.add(NbtDouble.of(spawnPos.x));
        pos.add(NbtDouble.of(spawnPos.y));
        pos.add(NbtDouble.of(spawnPos.z));

        // Append it to the nbt
        nbt.put("Pos", pos);

        // Set the item's nbt
        stack.setSubNbt("EntityTag", nbt);

        // Send update packet
        this.updateItemPacket(stack, InventoryUtils.getMainHandSlot());

        // Place the item
        InteractionUtils.fireActive(Hand.MAIN_HAND);
    }

    private void updateItemPacket(ItemStack stack, int slotId) {
        // Create the packet
        CreativeInventoryActionC2SPacket p = new CreativeInventoryActionC2SPacket(
            slotId,
            stack
        );

        // Get the network handler
        ComoClient.getClient().getNetworkHandler().sendPacket(p);
    }

    @Override
    public void fireEvent(Event event) {
        switch (event.getClass().getSimpleName()) {
            case "OnMouseButtonEvent": {
                OnMouseButtonEvent e = (OnMouseButtonEvent) event;
                
                // Check that it is a mouse down event
                if (e.action != 1) break;

                // Check that the mouse button is the right one
                if (!(
                    e.button == 1 ||
                    e.button == 2
                )) break;

                // Get the main hand item (i.e. Hand.MAIN_HAND ...)
                ItemStack item = ComoClient.me().getMainHandStack();

                // Check that the item is not air
                if (item.isEmpty()) break;

                // Make sure that it is a spawn egg
                if (!(item.getItem() instanceof net.minecraft.item.SpawnEggItem)) break;

                // Cancel the event
                e.ci.cancel();

                // Place the spawn egg
                this.placeSpawnEgg(item);

                break;
            }
        }
    }

    @Override
    public void activate() {
        this.addListen(OnMouseButtonEvent.class);
    }

    @Override
    public void deactivate() {
        this.removeListen(OnMouseButtonEvent.class);
        
    }
}
