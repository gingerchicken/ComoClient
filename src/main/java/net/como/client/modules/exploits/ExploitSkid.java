package net.como.client.modules.exploits;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.function.Supplier;

import net.como.client.ComoClient;
import net.como.client.commands.structures.Command;
import net.como.client.config.settings.Setting;
import net.como.client.events.Event;
import net.como.client.events.client.ClientTickEvent;
import net.como.client.modules.Module;
import net.como.client.utils.HashUtils;
import net.como.client.utils.NbtUtils;
import net.fabricmc.fabric.api.client.itemgroup.FabricItemGroupBuilder;
import net.minecraft.client.MinecraftClient;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.item.ItemGroup;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.nbt.NbtList;
import net.minecraft.util.Identifier;

public class ExploitSkid extends Module {
    public final static Identifier GROUP_ID = new Identifier("como-client:exploit_skids"); 

    public ExploitSkid() {
        super("ExploitSkid");
        
        this.setDescription("Grabs player's held item NBT and prints it to the console.");

        this.addSetting(new Setting("ChatLog", true) {{
            this.setDescription("Prints when the NBT was captured.");
        }});

        this.setCategory("Exploit");
    }

    @Override
    public String listOption() {
        return String.format("%d skidz", this.shownItems.size());
    }

    private String getNbtAsString(NbtCompound nbt) {
        if (nbt == null) {
            return "{}";
        }

        return nbt.toString();
    }

    protected ItemStack last = null;

    protected HashMap<String, Boolean> shownItems = new HashMap<>();
    protected List<ItemStack> stacks = new ArrayList<>();

    public String getUniqueKey(ItemStack item) {
        NbtCompound itemNbt = item.getNbt();

        String type = item.getItem().toString();
        String nbt  = getNbtAsString(itemNbt);

        // Hash the nbt string
        String nbtHash = HashUtils.generateSHA256(nbt);

        // Hash the type
        String typeHash = HashUtils.generateSHA256(type);

        // Make sure they're not null, if they are default them to empty strings (this is really unlikely to happen)
        nbtHash  = nbtHash  == null ? "" : nbtHash;
        typeHash = typeHash == null ? "" : typeHash;

        // Combine the hashes and hash it using SHA256
        return HashUtils.generateSHA256(nbtHash + typeHash);
    }

    public boolean hasLoggedKey(String key) {
        return shownItems.containsKey(key);
    }

    public void addItem(ItemStack item) {
        // Add the item
        shownItems.put(getUniqueKey(item), true);
        stacks.add(item);
    }

    public boolean setAsLogged(ItemStack item) {
        String key = getUniqueKey(item);

        if (this.hasLoggedKey(key)) {
            return false;
        }

        // Add the item
        this.addItem(item);

        return true;
    }

    public void displayNbt(PlayerEntity player, ItemStack itemStack) {
        NbtCompound nbt = itemStack.getNbt();
        
        if (!this.setAsLogged(itemStack)) return;

        // Update last item
        this.last = itemStack;

        // Get the key
        String key = this.getUniqueKey(itemStack);

        // Chat Log
        if (this.getBoolSetting("ChatLog")) this.displayMessage("Logged new item for " + player.getEntityName() + " with '" + itemStack.getName().getString() + "', see console for details!");
        
        // Console log
        ComoClient.log("Captured item ("+ itemStack.getItem().toString() +") for " + player.getEntityName() + " with key " + key + " see NBT below.");
        ComoClient.log(nbt.asString());
    }

    private FabricItemGroupBuilder builder = null;
    private ItemGroup group;

    private Supplier<ItemStack> iconSupplier = new Supplier<ItemStack>() {
        public ItemStack get() {
            ItemStack item = new ItemStack(Items.BUNDLE);
            
            NbtCompound nbt = new NbtCompound();
            NbtList es = new NbtList();

            es.add(NbtUtils.enchantment("minecraft:sharpness", (short)(1)));
            nbt.put("Enchantments", es);

            item.setNbt(nbt);

            return item;
        }
    };

    public void buildCreativeTab() {
        if (builder != null) return;

        this.builder = FabricItemGroupBuilder.create(GROUP_ID);
        this.builder.icon(this.iconSupplier);

        builder.appendItems((creativeStacks, itemGroup) -> {
            for (ItemStack stack : stacks) {
                creativeStacks.add(stack);
            }
        });

        this.group = this.builder.build();
    }

    @Override
    public void fireEvent(Event event) {
        switch (event.getClass().getSimpleName()) {
            case "ClientTickEvent": {
                // Get all of the players
                for (Entity ent : ComoClient.getClient().world.getEntities()) {
                    if (!(ent instanceof PlayerEntity)) continue;
                    
                    PlayerEntity player = (PlayerEntity) ent;

                    // Make sure it isn't us
                    if (player == ComoClient.me()) continue;

                    // Get the held item
                    ItemStack heldItem = player.getMainHandStack();
                    
                    // Grab its NBT
                    NbtCompound nbt = heldItem.getNbt();

                    // Check if the item is of value
                    if (nbt == null) continue; // No NBT, no point in continuing

                    // Show the item
                    this.displayNbt(player, heldItem);
                }

                break;
            }
        }
    }

    @Override
    public void activate() {
        // Update the creative menu
        this.buildCreativeTab();

        this.addListen(ClientTickEvent.class);
    }

    @Override
    public void deactivate() {
        this.removeListen(ClientTickEvent.class);
    }

    @Override
    public Iterable<Command> getCommands() {
        List<Command> list = new ArrayList<Command>();

        list.add(new CopyLast());
        list.add(new RecreateLast());
        list.add(new ClearList());

        return list;
    }

    private class RecreateLast extends Command {

        public RecreateLast() {
            super("recreate", "", "Recreate the last logged item");
        }

        @Override
        public Boolean trigger(String[] args) {
            if (last == null) {
                displayMessage("No item to recreate!");
                return true;
            }

            NbtUtils.giveItem(last);
            return true;
        }
    }

    private class CopyLast extends Command {
        public CopyLast() {
            super("copylast", "", "Copies the last stolen NBT");
        }

        @Override
        public Boolean trigger(String[] args) {
            if (last == null || last.getNbt() == null) {
                displayMessage("No NBT to copy!");
                return true;
            }
            
            MinecraftClient client = ComoClient.getClient();

            // Copy the nbt
            client.keyboard.setClipboard(getNbtAsString(last.getNbt()));
            
            displayMessage("Copied to clipboard!");

            return true;
        }
    }

    private class ClearList extends Command {
        public ClearList() {
            super("clear", "", "Clears the list of logged items");
        }

        @Override
        public Boolean trigger(String[] args) {
            stacks.clear();
            shownItems.clear();
            last = null;

            displayMessage("Cleared list!");

            return true;
        }
    }
}
